{"title":"Notes: Reinforcement Learning","markdown":{"yaml":{"layout":"post","title":"Notes: Reinforcement Learning","categories":["machine-learning"],"author":"Akhilesh","date":"2017-01-13","image":"image.png"},"containsRefs":false,"markdown":"\n\nNotes on Reinforcement learning.\n\nReinforcement learning is the problem faced by an agent that must learn behaviour through trial-and-error interactions with a dynamic environment. It is appropriately thought of as a class of problems, rather than as a set of techniques. \n\nThere are two main strategies for solving Reinforcement Learning problems. The first is to search in the space for behaviours in order to find one that performs well in the environment. This approach has been taken by work in genetic algorithms and genetic programming. The second is to use statistical techniques and dynamic programming methods to estimate the utility of taking actions in state of the world.\n\nIn the standard RL model, on each step of interaction the agent receives as input i, some indication of the current state, S, of the environment. The agent chooses an action, a, to generate an output. The action changes the state of the environment and the value of this state transition is communicated to the agent through a scalar reinforcement signal, r. It should choose actions that tend to increase the long-run sum of values of the reinforcement signal. It can learn to do this overtime by systematic trial and error.\n\nAn intuitive way to understand the relation between the agent and its environment is with the following example:\n\n*Environment* : You are in state 65. You have 4 possible actions.\n*Agent*: I’ll take action 2.\n*Environment*: You received a reinforcement of 7 units. You are in state 15. You have 2 possible actions.\n\nThe agent’s job is to find a policy Π, mapping states to actions, that maximizes some long run measure of reinforcement. We assume the environment is stationary.\n\nImportant ideas in Reinforcement Learning that came up –\n\n- Exploration – you have to try unknown actions to get information.\n- Exploitation – eventually you have to use what you know.\n- Regret – even if you learn intelligently you make mistakes.\n- Sampling – because of chance you have to try things repeatedly.\n- Difficulty – learning can be much harder than solving a known MDPs.\n\n\n**Markov Decision Process**\n\n\n- A set of states s∈S\n- A set of actions a∈A\n- A transition function T(s,a,s’). Also called the model or the dynamics. P(s’|s,a) = T(s,a,s’)\n- The reward function R(s,a,s’)\n- Start state\n- Maybe a terminal state\n- MDP’s are non-deterministic search problems\n\n\n“Markov” generally means that given the present state, the future and the past are independent. This is just like search, where the successor function could only depend on the current state (not the history). In the deterministic single-agent search problems, we wanted an optimal plan or sequence of actions, from start to goal.\n\nFor MDPs we want an optimal policy Π* : S ⇒ A\n\nA policy Π gives an action for each state. An optimal policy is one that maxmizes expected utility if followed. An explicit policy defines a reflex agent.\n\n**Discounting**\n\nIts reasonable to maximize the sum of rewards and/or to prefer rewards now to rewards later\n\nOne solution: values of rewards decay exponentially.\n\nHow to discount?\nEach time we descend a level. we multiply in the discount once.\n\nWhy discount?\nSooner rewards probably do have higher utility than later rewards. Also helps algorithm converge.\n\nExample: discount of 0.5\nU([1,2,3]) = 1*1 +2*0.5 + 3*o.25\n\nWhat if the game lasts forever?\nSolution:\n\n- Finite horizon: (similar to depth-limited search)\n- Gives non stationary policies (Π depends on time left)\n- Discounting: use 0<ϒ<1. Smaller ϒ means smaller “horizon”.\n\nAbsorbing state- guarantee that for every policy, a terminal state will eventually be reached.\n\nHow to solve MDPs?\n\nThe value (utility) of a state S:\n\nV*(s) = expected utility starting in S and acting optimally.\n(tells us how good each state is)\n\nQ*(s,a) = expected utility starting out having taken action ‘a’ from state ‘s’ and (thereafter) acting optimally.\n(‘s’ is fixed and we vary ‘a’)\n\nThe optimal policy:\nΠ*(s) = optimal action from state s = argmax Q*(s,a)\n(its the action that achieves the maximum)\n\n**Values of States**\n\nFundamental operation : compute the (expectimax) value of the state.\n\n- Expected utility under optimal action.\n- Average sum of (discounted) rewards\n- This is just what expectimax computed!\n\nRecursive definition of value:\n\nV*(s) = max Q*(s,a)\n\nQ*(s,a) = max Σ T(s,a,s’)[R(s,a,s’) + V*(s)]   — Bellman’s equation\n\n\n**Quantities**\n\nPolicy = map of states to actions.\nUtility = sum of discounted rewards.\nValues = expected future utility from a state (max node)\nQ-values = expected future utility from a q-state (chance node)\n\nBoth value iteration and policy iteration compute the same thing (all optimal values)\n\nIn Value iteration –\n\n- Every iteration updates both the values and (implicitly) the policy.\n- We dont track the policy, but taking the max over actions implicitly recompute it.\n\nIn policy iteration –\n\n- We do several passes that update utilities with fixed policy (each pass is fast because we consider only one action and not all of them)\n- After the policy is evaluated, a new policy is chosen (slow like a value iteration pass)\n- The new policy will be better (or we’re done)\n\n\n**Unknown MDP : Model Based Learning**\n\n- Learn an approximate model based on experiences.\n- Solve for values as if the learned model were correct.\n- E[A] = ΣP(a).a\n\nUnknown MDP : Model Free Learning\n\nPassive Reinforcement Learning :\n\n- Simplified task: policy evaluation\n    1. Input : fixed policy Π(s)\n    2. You don’t know the transitions T(s,a,s’)\n    3. You don’t know the rewards R(s,a,s’)\n    \n- Direct Evaluation:\n    Goal : Compute values for each state under Π\n    Idea : Average together observed sample values.\n    Act according to Π.\n    Everytime you visit a state, write down what the sum of discounted rewards turned out to be.\n    Average those samples.\n\nWhat’s good about direct evaluation?\n\n- Its easy to understand. \n- It does’nt require any knowledge of T,R.\n- It eventually computes the correct average values, using just sample transitions.\n\n\nWhat’s bad about it?\n\nIt wastes information about state connnection.\nEach state must be learned seperately. So, it takes log time to learn.\n\n- Sample based Policy Evaluation:\n    Take samples of outcome s'(by doing action!) and average.\n    We want to improve our estimate of V by computing these averages.\n\n- Temporal Difference Learning:\n    Big Idea: Learn from every experience!\n    Update V(s) each time we experience a transition (s,a,s’,r)\n    Likely outcomes s’ will contribute updates more often.\n\n- Temporal difference learning of values:\n    Policy still fixed, still doing evaluation!\n    Move values toward value of whatever successor occurs : running avg\n\nSample of V(s) : sample = R(s,Π(s),s’) + ϒV(s’)\n\nUpdate to V(s): V(s) ⇐ (1-α)V(s) + (α)sample\nCan also be written as : V(s) ⇐ V(s) + (α)[sample – V(s)]\n\nProblems with TD value Learning:\nTD value learning is a model – free way to do policy evaluation, mimicking Bellman               Updates with running sample averages.\nIdea : Learn Q-values, not values. Makes action selection model – free too!\n\n**Active Reinforcement Learning**\n\n- Value iteration:\n    1. Start with Q(s,a) = 0, which we know is right.\n    2. Given Qk, calculate the depth k+1\n    3. Q- values for all Q-states:\n    Qk+1 (s,a) ⇐ ∑ T(s,a,s’)[R(s,a,s’) + ϒmax Qk(s,a)]\n\n- Q-learning:\n    Learn Q(s,a) values as you go\n    1. Receive a sample (s,a,s’,r)\n    2. Consider your old estimate : Q(s,a)\n    3. Consider your new sample estimate:\n    sample = R(s,a,s’) + ϒmax Q(s’,a’)\n    4. Incorporate the new estimate into a running average:\n    Q(s,a): V(s) ⇐ (1-α)Q(s,a) + (α)[sample]\n    Q-learning converges to optimal policy — even if you’re acting suboptimally!\n    This is called off-policy learning.\n\n    Caveats:\n    1. You have to explore enough.\n    2. You have to eventually mae the learning rate small enough.\n    3…but not decrease it too quickly.\n    4. Basically, in the limit, it doesn’t matter how you select actions!\n\n**Exploration**\n\nHow to explore?\n\nSeveral schemes for forcing exploration:\n\nSimplest: random action (Ε – greedy)\n- Every time step, flip a coin.\n- With (small) probability Ε, act normally.\n- With (large) probability 1-Ε, act on current policy.\n\nProblems with random actions?\n\n- You do eventually explore the space, but keep thrashing around once learning is done.\n- One solution: lower Ε over time.\n- Another solution : exploration functions\n- Take a value estimate u and a, visit count n and returns an optimistic utility e.g : f(u, n) = u + k/n\n\n**Regret**\n\n- Even if you learn the optimal policy, you still make mistakes along the way.\n  - Regret is a measure of your total mistake cost : the difference between your (expected) rewards, including youthful suboptimality, and optimal (expected) rewards.\n- Mimicking regret goes beyond learning t be optimal – it requires optimally learnin g to be optimal.\n\nExample : random exploration and exploration functions both end up optimal, but random exploration has higher regret.\n\n**Approximate Q- learning**\n\nGeneralizing across states:\n\n- Basic Q-learning keeps a table of q-values.\n- In realistic situations, we cannot possibly learn about every single state!\n- Too many states to visit them all in training.\n- Too many states to hold the q-tables in memory.\n\nInstead, we want to generalize:\n\nLearn about some number of training states from experience. Generalize that experience to new, similar situations. This is a fundamental idea in machine learning.\n\nSolution: describe a state using a vector of features (properties)\n\n- Features are functions from state to real numbers (often 0/1) that capture important properties of the state .\n- Can also describe a q-state (s,a) with features.\n\n\n**Linear Value Functions**\n\n- Using a feature representation, we can write a q-function (or value function ) for any state using a few weights –\n    V(s) = w1f1(s) +w2f2(s)…+wnfn(s)\n    Q(s,a) = w1f1(s,a) + w2f2(s,a)+…+wnfn(s,a)\n- Advantage: Our experience is summed up in a few powerful numbers.\n- Disadvantage: States may share features but actually be very different in value !\n- Q- learning with linear Q-functions\n\nIntuitive interpretation:\n\n- Adjust weights of active features.\n\nExample: if something unexpectedly bad happens, blame the features that were on : disprefer all states with that state’s features.\n\n**Policy Search**\n\nProblem: often the feature-based policies that work well aren’t the ones that approximate V/Q best.\n\nSolution: Learn policies that minimize rewards, not the values that predict them.\n\nPolicy Search: start with an OK solution (eg: Q-learning) then fine-tune by hill climbing on feature weights.\n\nSimplest policy search :\n\nStart with an initial linear value function or Q-function. Nudge each feature weight up and down and see if your policy is better than before.\n\nProblems:\n\n- How do we tell the policy got better?\n- Need to run many sample episodes!\n- If there are a lot of features, that can be impractical.\n\nBetter methods exploit look-ahead structure, sample wisely, change multiple parameters.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"2017-01-13-reinforcement-learning.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"journal","title-block-banner":true,"layout":"post","title":"Notes: Reinforcement Learning","categories":["machine-learning"],"author":"Akhilesh","date":"2017-01-13","image":"image.png"},"extensions":{"book":{"multiFile":true}}}}}